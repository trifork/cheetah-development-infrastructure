#Listener config
# 2 listeners configured for oauth2 (1 internal docker and 1 external), 2 listeners for no auth (1 internal docker and 1 external), 1 listener for redpanda which uses SCRAM-SHA-512 auth.
listeners=auth-listener-docker-internal://kafka:19092,auth-listener-docker-external://0.0.0.0:9092,listener-docker-internal://kafka:19093,listener-docker-external://0.0.0.0:9093,redpanda://kafka:19094,CONTROLLER://kafka:9095
advertised.listeners=auth-listener-docker-internal://kafka:19092,auth-listener-docker-external://127.0.0.1:9092,listener-docker-internal://kafka:19093,listener-docker-external://127.0.0.1:9093,redpanda://kafka:19094
inter.broker.listener.name=listener-docker-internal
listener.security.protocol.map=auth-listener-docker-internal:SASL_PLAINTEXT,auth-listener-docker-external:SASL_PLAINTEXT,listener-docker-internal:PLAINTEXT,listener-docker-external:PLAINTEXT,redpanda:SASL_PLAINTEXT,CONTROLLER:PLAINTEXT
sasl.mechanism.inter.broker.protocol=OAUTHBEARER

# Internal docker oauth2 client, which is also used for inter-broker communication.
listener.name.auth-listener-docker-internal.sasl.enabled.mechanisms=OAUTHBEARER
listener.name.auth-listener-docker-internal.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
    oauth.client.id="default-access" \
    oauth.client.secret="default-access-secret" \
    oauth.scope="kafka" \
    oauth.token.endpoint.uri="http://keycloak:1852/realms/local-development/protocol/openid-connect/token" \
    oauth.jwks.endpoint.uri="http://keycloak:1852/realms/local-development/protocol/openid-connect/certs" \
    oauth.check.issuer="false" \
    oauth.username.claim="sub" \
    unsecuredLoginStringClaim_sub="unused";
listener.name.auth-listener-docker-internal.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler
listener.name.auth-listener-docker-internal.oauthbearer.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

# External oauth2 client
listener.name.auth-listener-docker-external.sasl.enabled.mechanisms=OAUTHBEARER
listener.name.auth-listener-docker-external.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
    oauth.jwks.endpoint.uri="http://keycloak:1852/realms/local-development/protocol/openid-connect/certs" \
    oauth.check.issuer="false" \
    oauth.username.claim="sub" \
    unsecuredLoginStringClaim_sub="unused";
listener.name.auth-listener-docker-external.oauthbearer.sasl.server.callback.handler.class=io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler

# Internal basic auth client for redpanda.
listener.name.redpanda.sasl.enabled.mechanisms=SCRAM-SHA-512
listener.name.redpanda.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;

# Authorization configuration
principal.builder.class=io.strimzi.kafka.oauth.server.OAuthKafkaPrincipalBuilder
authorizer.class.name=com.trifork.cheetah.CheetahKRaftAuthorizer

# General config
broker.id=1
min.insync.replicas=1
default.replication.factor=1
transaction.state.log.replication.factor=1
offsets.topic.replication.factor=1

# Users to bypass CheetahKafkaAuthorizer.
# User:ANONYMOUS can be removed if you want to require authentication.
super.users=User:redpanda;User:ANONYMOUS

# Cheetah config
cheetah.authorization.claim.name=roles
cheetah.authorization.prefix=Kafka_
cheetah.authorization.claim.is-list=true

# KRaft config
process.roles=broker,controller
node.id=1
controller.quorum.voters=1@kafka:9095
controller.listener.names=CONTROLLER
cluster.id=iBzfyk2mT5qGMuO9Yu0WrQ