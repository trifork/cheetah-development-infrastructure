---
services:
  zookeeper:
    mem_limit: 256m
    container_name: zookeeper
    image: quay.io/strimzi/kafka:0.40.0-kafka-3.7.0
    platform: linux/amd64
    command:
      ["sh", "-c", "bin/zookeeper-server-start.sh config/zookeeper.properties"]
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      LOG_DIR: /tmp/logs
    restart: unless-stopped
    profiles:
      - kafka-core
      - schema-registry-core
      - core
      - kafka
      - observability
      - full

  kafka:
    cpus: 2
    container_name: kafka
    image: ${CHEETAH_DOCKER_REGISTRY-}cheetah-infrastructure-utils-kafka:strimzi-0.40.0-kafka-3.7.0-trifork-1.5.0
    platform: linux/amd64
    hostname: kafka
    mem_limit: 1024m
    command:
      [
        "sh",
        "-c",
        "bin/kafka-server-start.sh /opt/kafka/custom-config/server.properties",
      ]
    depends_on:
      zookeeper:
        condition: service_started
      keycloak-setup:
        condition: service_completed_successfully
    ports:
      - "9092:9092" # Requires OAuth2 authentication
      - "9093:9093" # Requires No authentication
    expose:
      - "19092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/opt/kafka/custom-config/log4j.properties" # enables debug logging
    volumes:
      - kafka:/var/lib/kafka # enable for persistent storage
      - ./config/kafka/server.properties:/opt/kafka/custom-config/server.properties
      #- ./config/kafka/log4j.properties:/opt/kafka/custom-config/log4j.properties
      - ./config/kafka/log4j.cluster.properties:/opt/kafka/custom-config/log4j.properties
    restart: unless-stopped
    healthcheck:
      test: nc -z kafka 19092 || exit -1
      interval: 30s # (default: 30s)
      timeout: 10s # (default: 30s)
      retries: 3 #  (default: 3)
      start_period: 30s # (default: 0s)
    profiles:
      - kafka-core
      - schema-registry-core
      - core
      - kafka
      - observability
      - full

  kafka-setup:
    mem_limit: 512m
    image: quay.io/strimzi/kafka:0.40.0-kafka-3.7.0
    platform: linux/amd64
    container_name: kafka-setup
    volumes:
      - ./config/kafkaconfig.sh:/etc/config/kafkaconfig.sh
      - ./config/kafka/kafkasetup.config:/etc/config/kafkasetup.config
    command: "bash /etc/config/kafkaconfig.sh"
    depends_on:
      kafka:
        condition: service_healthy
      keycloak-setup:
        condition: service_completed_successfully
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
      KAFKA_TOPICS: ${INITIAL_KAFKA_TOPICS}
    profiles:
      - kafka-core
      - schema-registry-core
      - core
      - kafka
      - observability
      - full

  redpanda:
    mem_limit: 128m
    container_name: redpanda
    image: redpandadata/console:v2.4.7
    entrypoint: /bin/sh
    command: -c "/app/console"
    environment:
      CONFIG_FILEPATH: /etc/redpanda-config.yml
    volumes:
      - ./config/redpanda-admin.yaml:/etc/redpanda-config.yml # get FULL access to kafka from redpanda
      #- ./config/redpanda-cluster.yaml:/etc/redpanda-config.yml # use OAUTH2 authentication with limited access like on a cluster
    ports:
      - "9898:8080"
    healthcheck:
      interval: 30s # (default: 30s)
      timeout: 10s # (default: 30s)
      retries: 3 #  (default: 3)
      start_period: 30s # (default: 0s)
    depends_on:
      kafka:
        condition: service_healthy
      keycloak-setup:
        condition: service_completed_successfully
      schema-registry:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    profiles:
      - kafka
      - full

  # Kafka Prometheus exporter https://github.com/cloudhut/kminion
  kafka-minion:
    mem_limit: 128m
    image: redpandadata/kminion:v2.2.8
    hostname: kafka-minion
    container_name: kafka-minion
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8088:8080
    environment:
      KAFKA_BROKERS: kafka:19093
    profiles:
      - observability
      - full

  schema-registry:
    mem_limit: 256m
    image: apicurio/apicurio-registry-kafkasql:2.5.10.Final
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
      keycloak-setup:
        condition: service_completed_successfully
      kafka-setup:
        condition: service_completed_successfully
    ports:
      - "8081:8080" # http://localhost:8081/ui/
    restart: unless-stopped
    environment:
      # Kafka
      ENABLE_KAFKA_SASL: true
      CLIENT_ID: schema-registry
      CLIENT_SECRET: schema-registry-secret
      OAUTH_SCOPE: kafka
      OAUTH_TOKEN_ENDPOINT_URI: http://keycloak:1852/realms/local-development/protocol/openid-connect/token
      KAFKA_BOOTSTRAP_SERVERS: kafka:19092
      KAFKA_SECURITY_PROTOCOL: SASL_PLAINTEXT
      REGISTRY_KAFKASQL_TOPIC: _kafkasql-journal
      REGISTRY_KAFKASQL_TOPIC_AUTO_CREATE: false
      # Basics
      REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED: true
      REGISTRY_UI_FEATURES_READONLY: true
      # API protection
      AUTH_ENABLED: true # also protects UI
      ROLE_BASED_AUTHZ_ENABLED: true # Allows admin and developer concept
      REGISTRY_AUTH_OBAC_ENABLED: true
      REGISTRY_AUTH_OBAC_LIMIT_GROUP_ACCESS: true
      ROLE_BASED_AUTHZ_SOURCE: "token"
      REGISTRY_AUTH_ROLES_DEVELOPER: "sr-producer" # "sr-developer"
      # https://quarkus.io/guides/security-oidc-configuration-properties-reference
      quarkus.oidc.enabled: true
      quarkus.oidc.auth-server-url: http://keycloak:1852/realms/local-development
      quarkus.oidc.jwks-path: /protocol/openid-connect/certs
      # quarkus.log.level: DEBUG
      quarkus.oidc.roles.role-claim-path: roles

    healthcheck:
      test: curl schema-registry:8080 || exit -1
      interval: 30s # (default: 30s)
      timeout: 10s # (default: 30s)
      retries: 3 #  (default: 3)
      start_period: 30s # (default: 0s)
    profiles:
      - schema-registry-core
      - core
      - kafka
      - full

volumes:
  kafka:

networks:
  default:
    name: "cheetah-infrastructure"
