version: '2.1'

services:

  zoo:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    #volumes:
    #  - ./zk-single-kafka-single/zoo/data:/data
    #  - ./zk-single-kafka-single/zoo/datalog:/datalog
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      # volumes:
      #- ./zk-single-kafka-single/kafka/data:/var/lib/kafka/data
    depends_on:
      - zoo
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka-setup
    container_name: kafka-setup
    volumes:
      - ../config/kafkaconfig.sh:/etc/config/kafkaconfig.sh
    command: "bash /etc/config/kafkaconfig.sh"
    depends_on:
      kafka: 
        condition: service_healthy
    restart: on-failure
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  redpanda:
    image: docker.redpanda.com/vectorized/console:v2.1.1
    entrypoint: /bin/sh
    command: -c "/app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
    volumes:
      - ../config/redpanda.yaml:/tmp/config.yml
    ports:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy

  # Kafka Prometheus exporter https://github.com/cloudhut/kminion
  kafka-minion:
    image: quay.io/cloudhut/kminion:master
    hostname: kafka-minion
    container_name: kafka-minion
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8088:8080
    environment:
      KAFKA_BROKERS: kafka:19092
    profiles:
      - donotstart

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: nc -z localhost 8081 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  default:
    name: "cheetah-infrastructure"
